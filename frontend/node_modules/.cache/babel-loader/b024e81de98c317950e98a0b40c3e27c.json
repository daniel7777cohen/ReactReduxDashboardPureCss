{"ast":null,"code":"export const filterByFields = (filteredData, payload) => {\n  const {\n    transactionId,\n    binNumber,\n    min,\n    max,\n    decision,\n    payment\n  } = payload;\n  FILTER_DATA;\n  let newFilteredData = filteredData.filter(data => data.transactionId.includes(transactionId) && data.binNumber.includes(binNumber) && data.amount >= min);\n\n  if (max > 0) {\n    newFilteredData = newFilteredData.filter(data => data.amount <= max);\n  }\n\n  if (decision !== \"all\") {\n    newFilteredData = newFilteredData.filter(data => data.decision === decision);\n  }\n\n  if (payment !== \"all\") {\n    newFilteredData = newFilteredData.filter(data => data.payment === payment);\n  }\n\n  return newFilteredData;\n};","map":{"version":3,"sources":["/Users/danielcohen/Desktop/nSureTest/nSureTest/src/store/reducers/helper.js"],"names":["filterByFields","filteredData","payload","transactionId","binNumber","min","max","decision","payment","FILTER_DATA","newFilteredData","filter","data","includes","amount"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AACvD,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,SAAjB;AAA4BC,IAAAA,GAA5B;AAAiCC,IAAAA,GAAjC;AAAsCC,IAAAA,QAAtC;AAAgDC,IAAAA;AAAhD,MAA4DN,OAAlE;AACAO,EAAAA,WAAW;AACX,MAAIC,eAAe,GAAGT,YAAY,CAACU,MAAb,CACnBC,IAAD,IACEA,IAAI,CAACT,aAAL,CAAmBU,QAAnB,CAA4BV,aAA5B,KACAS,IAAI,CAACR,SAAL,CAAeS,QAAf,CAAwBT,SAAxB,CADA,IAEAQ,IAAI,CAACE,MAAL,IAAeT,GAJG,CAAtB;;AAOA,MAAIC,GAAG,GAAG,CAAV,EAAa;AACXI,IAAAA,eAAe,GAAGA,eAAe,CAACC,MAAhB,CAAwBC,IAAD,IAAUA,IAAI,CAACE,MAAL,IAAeR,GAAhD,CAAlB;AACD;;AAED,MAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACtBG,IAAAA,eAAe,GAAGA,eAAe,CAACC,MAAhB,CACfC,IAAD,IAAUA,IAAI,CAACL,QAAL,KAAkBA,QADZ,CAAlB;AAGD;;AAED,MAAIC,OAAO,KAAK,KAAhB,EAAuB;AACrBE,IAAAA,eAAe,GAAGA,eAAe,CAACC,MAAhB,CACfC,IAAD,IAAUA,IAAI,CAACJ,OAAL,KAAiBA,OADX,CAAlB;AAGD;;AAED,SAAOE,eAAP;AACD,CA3BM","sourcesContent":["export const filterByFields = (filteredData, payload) => {\n  const { transactionId, binNumber, min, max, decision, payment } = payload;\n  FILTER_DATA\n  let newFilteredData = filteredData.filter(\n    (data) =>\n      data.transactionId.includes(transactionId) &&\n      data.binNumber.includes(binNumber) &&\n      data.amount >= min\n  );\n\n  if (max > 0) {\n    newFilteredData = newFilteredData.filter((data) => data.amount <= max);\n  }\n\n  if (decision !== \"all\") {\n    newFilteredData = newFilteredData.filter(\n      (data) => data.decision === decision\n    );\n  }\n\n  if (payment !== \"all\") {\n    newFilteredData = newFilteredData.filter(\n      (data) => data.payment === payment\n    );\n  }\n\n  return newFilteredData;\n};\n"]},"metadata":{},"sourceType":"module"}